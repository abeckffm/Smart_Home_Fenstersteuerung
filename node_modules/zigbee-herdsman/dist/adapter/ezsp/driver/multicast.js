"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Multicast = void 0;
const types_1 = require("./types");
const named_1 = require("./types/named");
const struct_1 = require("./types/struct");
const debug_1 = __importDefault(require("debug"));
const debug = {
    log: debug_1.default('zigbee-herdsman:adapter:ezsp:multicast'),
};
class Multicast {
    constructor(driver) {
        this.TABLE_SIZE = 16;
        this.driver = driver;
        this._multicast = {};
        this._available = [];
    }
    _initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const size = yield this.driver.ezsp.getConfigurationValue(types_1.EzspConfigId.CONFIG_MULTICAST_TABLE_SIZE);
            for (let i = 0; i < size; i++) {
                const [st, entry] = yield this.driver.ezsp.getMulticastTableEntry(i);
                if (st !== named_1.EmberStatus.SUCCESS) {
                    debug.log("Couldn't get MulticastTableEntry #%s: %s", i, st);
                    continue;
                }
                debug.log("MulticastTableEntry[%s] = %s", i, entry);
                if (entry.endpoint !== 0) {
                    this._multicast[entry.multicastId] = [entry, i];
                }
                else {
                    this._available.push(i);
                }
            }
        });
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any*/
    startup(enpoints) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driver.queue.execute(() => __awaiter(this, void 0, void 0, function* () {
                yield this._initialize();
                for (const ep of enpoints) {
                    if (!ep.id)
                        continue;
                    for (const group_id of ep.member_of) {
                        yield this.subscribe(group_id);
                    }
                }
            }));
        });
    }
    subscribe(group_id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._multicast.indexOf(group_id) >= 0) {
                debug.log("%s is already subscribed", group_id);
                return named_1.EmberStatus.SUCCESS;
            }
            try {
                const idx = this._available.pop();
                const entry = new struct_1.EmberMulticastTableEntry();
                entry.endpoint = 1;
                entry.multicastId = group_id;
                entry.networkIndex = 0;
                const [status] = yield this.driver.ezsp.setMulticastTableEntry(idx, entry);
                if (status !== named_1.EmberStatus.SUCCESS) {
                    debug.log("Set MulticastTableEntry #%s for %s multicast id: %s", idx, entry.multicastId, status);
                    this._available.push(idx);
                    return status;
                }
                this._multicast[entry.multicastId] = [entry, idx];
                debug.log("Set MulticastTableEntry #%s for %s multicast id: %s", idx, entry.multicastId, status);
                return status;
            }
            catch (e) {
                debug.log("No more available slots MulticastId subscription");
                return named_1.EmberStatus.INDEX_OUT_OF_RANGE;
            }
        });
    }
}
exports.Multicast = Multicast;
//# sourceMappingURL=multicast.js.map